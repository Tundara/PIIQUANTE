(function (root, factory) {
  var name = 'Multex';
  if (typeof define === 'function' && define.amd) {
    define([], function () {
        return (root[name] = factory());
    });
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root[name] = factory();
  }
}(this, function () {

  var Key = function (id, multex) {
    this._id = id;
    this._multex = multex;
  };

  Key.prototype.use = function () {
    return this._multex.use(this);
  };

  var Multex = function () {
    this._keyId = 0;
  };

  Multex.prototype.next = function () {
    return ++this._keyId;
  };

  Multex.prototype.key = function () {
    return new Key(this.next(), this);
  };

  Multex.prototype.use = function (key) {
    return true;
  };


  var LastOnly = function () {
    Multex.call(this);
  };
  LastOnly.prototype = new Multex();
  LastOnly.prototype.constructor = LastOnly;
  LastOnly.prototype.use = function (key) {
    Multex.prototype.use.call(this, key);
    return key._id === this._keyId;
  };


  var FirstOnly = function () {
    Multex.call(this);
  };
  FirstOnly.prototype = new Multex();
  FirstOnly.prototype.constructor = FirstOnly;
  FirstOnly.prototype.use = function (key) {
    Multex.prototype.use.call(this, key);
    return key._id === 1;
  };


  Multex.Key = Key;
  Multex.LastOnly = LastOnly;
  Multex.FirstOnly = FirstOnly;

  return Multex;
}));
